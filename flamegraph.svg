<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="725.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="4380"><g><title>&lt;&amp;mut S as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.02%)</title><rect x="0.0000%" y="661" width="0.0228%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;&amp;mut csv_async::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (13 samples, 0.30%)</title><rect x="0.0228%" y="661" width="0.2968%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="13"/><text x="0.2728%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46 samples, 1.05%)</title><rect x="0.3196%" y="661" width="1.0502%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="46"/><text x="0.5696%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (43 samples, 0.98%)</title><rect x="1.3699%" y="661" width="0.9817%" height="15" fill="rgb(248,212,6)" fg:x="60" fg:w="43"/><text x="1.6199%" y="671.50"></text></g><g><title>&lt;csv_async::async_readers::DeserializeRecordsStream&lt;R,D&gt; as futures_core::stream::Stream&gt;::poll_next (42 samples, 0.96%)</title><rect x="2.3516%" y="661" width="0.9589%" height="15" fill="rgb(208,68,35)" fg:x="103" fg:w="42"/><text x="2.6016%" y="671.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (3 samples, 0.07%)</title><rect x="3.3105%" y="661" width="0.0685%" height="15" fill="rgb(232,128,0)" fg:x="145" fg:w="3"/><text x="3.5605%" y="671.50"></text></g><g><title>&lt;fifa_sorter::reading::_::&lt;impl serde::de::Deserialize for fifa_sorter::reading::Rating&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (15 samples, 0.34%)</title><rect x="3.3790%" y="661" width="0.3425%" height="15" fill="rgb(207,160,47)" fg:x="148" fg:w="15"/><text x="3.6290%" y="671.50"></text></g><g><title>&lt;tokio_stream::stream_ext::collect::Collect&lt;T,U&gt; as core::future::future::Future&gt;::poll (18 samples, 0.41%)</title><rect x="3.7215%" y="661" width="0.4110%" height="15" fill="rgb(228,23,34)" fg:x="163" fg:w="18"/><text x="3.9715%" y="671.50"></text></g><g><title>&lt;u32 as fifa_sorter::hash_table::Hashable&gt;::hash (9 samples, 0.21%)</title><rect x="4.1324%" y="661" width="0.2055%" height="15" fill="rgb(218,30,26)" fg:x="181" fg:w="9"/><text x="4.3824%" y="671.50"></text></g><g><title>&lt;&amp;mut csv_async::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (38 samples, 0.87%)</title><rect x="4.3379%" y="645" width="0.8676%" height="15" fill="rgb(220,122,19)" fg:x="190" fg:w="38"/><text x="4.5879%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.62%)</title><rect x="5.2055%" y="645" width="0.6164%" height="15" fill="rgb(250,228,42)" fg:x="228" fg:w="27"/><text x="5.4555%" y="655.50"></text></g><g><title>__free (5 samples, 0.11%)</title><rect x="5.8219%" y="645" width="0.1142%" height="15" fill="rgb(240,193,28)" fg:x="255" fg:w="5"/><text x="6.0719%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="5.9361%" y="645" width="0.0228%" height="15" fill="rgb(216,20,37)" fg:x="260" fg:w="1"/><text x="6.1861%" y="655.50"></text></g><g><title>[fifa_sorter] (72 samples, 1.64%)</title><rect x="4.3379%" y="661" width="1.6438%" height="15" fill="rgb(206,188,39)" fg:x="190" fg:w="72"/><text x="4.5879%" y="671.50"></text></g><g><title>fifa_sorter::hash_table::HashTable&lt;K,V&gt;::insert (1 samples, 0.02%)</title><rect x="5.9589%" y="645" width="0.0228%" height="15" fill="rgb(217,207,13)" fg:x="261" fg:w="1"/><text x="6.2089%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12 samples, 0.27%)</title><rect x="7.7169%" y="645" width="0.2740%" height="15" fill="rgb(231,73,38)" fg:x="338" fg:w="12"/><text x="7.9669%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.07%)</title><rect x="7.9909%" y="645" width="0.0685%" height="15" fill="rgb(225,20,46)" fg:x="350" fg:w="3"/><text x="8.2409%" y="655.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (1 samples, 0.02%)</title><rect x="8.0594%" y="645" width="0.0228%" height="15" fill="rgb(210,31,41)" fg:x="353" fg:w="1"/><text x="8.3094%" y="655.50"></text></g><g><title>&lt;csv_async::async_readers::DeserializeRecordsStream&lt;R,D&gt; as futures_core::stream::Stream&gt;::poll_next (10 samples, 0.23%)</title><rect x="8.0822%" y="645" width="0.2283%" height="15" fill="rgb(221,200,47)" fg:x="354" fg:w="10"/><text x="8.3322%" y="655.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::pow10_fast_path (1 samples, 0.02%)</title><rect x="8.3105%" y="645" width="0.0228%" height="15" fill="rgb(226,26,5)" fg:x="364" fg:w="1"/><text x="8.5605%" y="655.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (10 samples, 0.23%)</title><rect x="8.3333%" y="645" width="0.2283%" height="15" fill="rgb(249,33,26)" fg:x="365" fg:w="10"/><text x="8.5833%" y="655.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="8.5616%" y="645" width="0.0228%" height="15" fill="rgb(235,183,28)" fg:x="375" fg:w="1"/><text x="8.8116%" y="655.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.07%)</title><rect x="8.5845%" y="645" width="0.0685%" height="15" fill="rgb(221,5,38)" fg:x="376" fg:w="3"/><text x="8.8345%" y="655.50"></text></g><g><title>__free (6 samples, 0.14%)</title><rect x="8.6530%" y="645" width="0.1370%" height="15" fill="rgb(247,18,42)" fg:x="379" fg:w="6"/><text x="8.9030%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.05%)</title><rect x="8.7900%" y="645" width="0.0457%" height="15" fill="rgb(241,131,45)" fg:x="385" fg:w="2"/><text x="9.0400%" y="655.50"></text></g><g><title>_int_free (17 samples, 0.39%)</title><rect x="8.8356%" y="645" width="0.3881%" height="15" fill="rgb(249,31,29)" fg:x="387" fg:w="17"/><text x="9.0856%" y="655.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="9.2237%" y="645" width="0.0228%" height="15" fill="rgb(225,111,53)" fg:x="404" fg:w="1"/><text x="9.4737%" y="655.50"></text></g><g><title>_int_realloc (2 samples, 0.05%)</title><rect x="9.2466%" y="645" width="0.0457%" height="15" fill="rgb(238,160,17)" fg:x="405" fg:w="2"/><text x="9.4966%" y="655.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (9 samples, 0.21%)</title><rect x="9.2922%" y="645" width="0.2055%" height="15" fill="rgb(214,148,48)" fg:x="407" fg:w="9"/><text x="9.5422%" y="655.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (8 samples, 0.18%)</title><rect x="9.4977%" y="645" width="0.1826%" height="15" fill="rgb(232,36,49)" fg:x="416" fg:w="8"/><text x="9.7477%" y="655.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (5 samples, 0.11%)</title><rect x="9.6804%" y="645" width="0.1142%" height="15" fill="rgb(209,103,24)" fg:x="424" fg:w="5"/><text x="9.9304%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;csv_async::async_readers::deserialize_record_borrowed&lt;tokio::fs::file::File,fifa_sorter::reading::Tag&gt;::{{closure}}&gt;&gt; (2 samples, 0.05%)</title><rect x="9.7945%" y="645" width="0.0457%" height="15" fill="rgb(229,88,8)" fg:x="429" fg:w="2"/><text x="10.0445%" y="655.50"></text></g><g><title>csv_async::deserializer::deserialize_string_record (3 samples, 0.07%)</title><rect x="9.8402%" y="645" width="0.0685%" height="15" fill="rgb(213,181,19)" fg:x="431" fg:w="3"/><text x="10.0902%" y="655.50"></text></g><g><title>csv_core::reader::Reader::line (4 samples, 0.09%)</title><rect x="9.9087%" y="645" width="0.0913%" height="15" fill="rgb(254,191,54)" fg:x="434" fg:w="4"/><text x="10.1587%" y="655.50"></text></g><g><title>epoll_wait (1 samples, 0.02%)</title><rect x="10.0000%" y="645" width="0.0228%" height="15" fill="rgb(241,83,37)" fg:x="438" fg:w="1"/><text x="10.2500%" y="655.50"></text></g><g><title>[unknown] (183 samples, 4.18%)</title><rect x="5.9817%" y="661" width="4.1781%" height="15" fill="rgb(233,36,39)" fg:x="262" fg:w="183"/><text x="6.2317%" y="671.50">[unkn..</text></g><g><title>tokio_stream::stream_ext::collect::&lt;impl tokio_stream::stream_ext::collect::sealed::FromStreamPriv&lt;core::result::Result&lt;T,E&gt;&gt; for core::result::Result&lt;U,E&gt;&gt;::extend (6 samples, 0.14%)</title><rect x="10.0228%" y="645" width="0.1370%" height="15" fill="rgb(226,3,54)" fg:x="439" fg:w="6"/><text x="10.2728%" y="655.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.21%)</title><rect x="10.1598%" y="661" width="0.2055%" height="15" fill="rgb(245,192,40)" fg:x="445" fg:w="9"/><text x="10.4098%" y="671.50"></text></g><g><title>__GI___mprotect (1 samples, 0.02%)</title><rect x="10.3653%" y="661" width="0.0228%" height="15" fill="rgb(238,167,29)" fg:x="454" fg:w="1"/><text x="10.6153%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.07%)</title><rect x="11.3242%" y="629" width="0.0685%" height="15" fill="rgb(232,182,51)" fg:x="496" fg:w="3"/><text x="11.5742%" y="639.50"></text></g><g><title>__GI___ctype_init (12 samples, 0.27%)</title><rect x="11.3927%" y="629" width="0.2740%" height="15" fill="rgb(231,60,39)" fg:x="499" fg:w="12"/><text x="11.6427%" y="639.50"></text></g><g><title>__GI___sigsetjmp (3 samples, 0.07%)</title><rect x="11.6667%" y="629" width="0.0685%" height="15" fill="rgb(208,69,12)" fg:x="511" fg:w="3"/><text x="11.9167%" y="639.50"></text></g><g><title>__malloc_arena_thread_freeres (2 samples, 0.05%)</title><rect x="11.7352%" y="629" width="0.0457%" height="15" fill="rgb(235,93,37)" fg:x="514" fg:w="2"/><text x="11.9852%" y="639.50"></text></g><g><title>__free (1 samples, 0.02%)</title><rect x="11.7580%" y="613" width="0.0228%" height="15" fill="rgb(213,116,39)" fg:x="515" fg:w="1"/><text x="12.0080%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="11.7580%" y="597" width="0.0228%" height="15" fill="rgb(222,207,29)" fg:x="515" fg:w="1"/><text x="12.0080%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="11.7808%" y="517" width="0.0228%" height="15" fill="rgb(206,96,30)" fg:x="516" fg:w="1"/><text x="12.0308%" y="527.50"></text></g><g><title>std::sys::unix::thread::guard::current (3 samples, 0.07%)</title><rect x="11.7808%" y="565" width="0.0685%" height="15" fill="rgb(218,138,4)" fg:x="516" fg:w="3"/><text x="12.0308%" y="575.50"></text></g><g><title>__pthread_getattr_np (3 samples, 0.07%)</title><rect x="11.7808%" y="549" width="0.0685%" height="15" fill="rgb(250,191,14)" fg:x="516" fg:w="3"/><text x="12.0308%" y="559.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.07%)</title><rect x="11.7808%" y="533" width="0.0685%" height="15" fill="rgb(239,60,40)" fg:x="516" fg:w="3"/><text x="12.0308%" y="543.50"></text></g><g><title>tcache_init.part.0 (2 samples, 0.05%)</title><rect x="11.8037%" y="517" width="0.0457%" height="15" fill="rgb(206,27,48)" fg:x="517" fg:w="2"/><text x="12.0537%" y="527.50"></text></g><g><title>arena_get2.part.0 (2 samples, 0.05%)</title><rect x="11.8037%" y="501" width="0.0457%" height="15" fill="rgb(225,35,8)" fg:x="517" fg:w="2"/><text x="12.0537%" y="511.50"></text></g><g><title>alloc_new_heap (2 samples, 0.05%)</title><rect x="11.8037%" y="485" width="0.0457%" height="15" fill="rgb(250,213,24)" fg:x="517" fg:w="2"/><text x="12.0537%" y="495.50"></text></g><g><title>__GI___mprotect (1 samples, 0.02%)</title><rect x="11.8265%" y="469" width="0.0228%" height="15" fill="rgb(247,123,22)" fg:x="518" fg:w="1"/><text x="12.0765%" y="479.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.02%)</title><rect x="13.3790%" y="533" width="0.0228%" height="15" fill="rgb(231,138,38)" fg:x="586" fg:w="1"/><text x="13.6290%" y="543.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.09%)</title><rect x="13.4018%" y="533" width="0.0913%" height="15" fill="rgb(231,145,46)" fg:x="587" fg:w="4"/><text x="13.6518%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (4 samples, 0.09%)</title><rect x="13.4018%" y="517" width="0.0913%" height="15" fill="rgb(251,118,11)" fg:x="587" fg:w="4"/><text x="13.6518%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.09%)</title><rect x="13.4018%" y="501" width="0.0913%" height="15" fill="rgb(217,147,25)" fg:x="587" fg:w="4"/><text x="13.6518%" y="511.50"></text></g><g><title>__clock_gettime_2 (4 samples, 0.09%)</title><rect x="13.4018%" y="485" width="0.0913%" height="15" fill="rgb(247,81,37)" fg:x="587" fg:w="4"/><text x="13.6518%" y="495.50"></text></g><g><title>__vdso_clock_gettime (4 samples, 0.09%)</title><rect x="13.4018%" y="469" width="0.0913%" height="15" fill="rgb(209,12,38)" fg:x="587" fg:w="4"/><text x="13.6518%" y="479.50"></text></g><g><title>[[vdso]] (2 samples, 0.05%)</title><rect x="13.4475%" y="453" width="0.0457%" height="15" fill="rgb(227,1,9)" fg:x="589" fg:w="2"/><text x="13.6975%" y="463.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (42 samples, 0.96%)</title><rect x="12.6941%" y="549" width="0.9589%" height="15" fill="rgb(248,47,43)" fg:x="556" fg:w="42"/><text x="12.9441%" y="559.50"></text></g><g><title>syscall (7 samples, 0.16%)</title><rect x="13.4932%" y="533" width="0.1598%" height="15" fill="rgb(221,10,30)" fg:x="591" fg:w="7"/><text x="13.7432%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="13.6301%" y="517" width="0.0228%" height="15" fill="rgb(210,229,1)" fg:x="597" fg:w="1"/><text x="13.8801%" y="527.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (41 samples, 0.94%)</title><rect x="13.6530%" y="549" width="0.9361%" height="15" fill="rgb(222,148,37)" fg:x="598" fg:w="41"/><text x="13.9030%" y="559.50"></text></g><g><title>syscall (6 samples, 0.14%)</title><rect x="14.4521%" y="533" width="0.1370%" height="15" fill="rgb(234,67,33)" fg:x="633" fg:w="6"/><text x="14.7021%" y="543.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (6 samples, 0.14%)</title><rect x="14.5890%" y="549" width="0.1370%" height="15" fill="rgb(247,98,35)" fg:x="639" fg:w="6"/><text x="14.8390%" y="559.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="14.7032%" y="533" width="0.0228%" height="15" fill="rgb(247,138,52)" fg:x="644" fg:w="1"/><text x="14.9532%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="14.7032%" y="517" width="0.0228%" height="15" fill="rgb(213,79,30)" fg:x="644" fg:w="1"/><text x="14.9532%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="14.7032%" y="501" width="0.0228%" height="15" fill="rgb(246,177,23)" fg:x="644" fg:w="1"/><text x="14.9532%" y="511.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.02%)</title><rect x="14.7032%" y="485" width="0.0228%" height="15" fill="rgb(230,62,27)" fg:x="644" fg:w="1"/><text x="14.9532%" y="495.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="14.7032%" y="469" width="0.0228%" height="15" fill="rgb(216,154,8)" fg:x="644" fg:w="1"/><text x="14.9532%" y="479.50"></text></g><g><title>[[vdso]] (1 samples, 0.02%)</title><rect x="14.7032%" y="453" width="0.0228%" height="15" fill="rgb(244,35,45)" fg:x="644" fg:w="1"/><text x="14.9532%" y="463.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.05%)</title><rect x="14.7260%" y="549" width="0.0457%" height="15" fill="rgb(251,115,12)" fg:x="645" fg:w="2"/><text x="14.9760%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.05%)</title><rect x="14.7260%" y="533" width="0.0457%" height="15" fill="rgb(240,54,50)" fg:x="645" fg:w="2"/><text x="14.9760%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.05%)</title><rect x="14.7260%" y="517" width="0.0457%" height="15" fill="rgb(233,84,52)" fg:x="645" fg:w="2"/><text x="14.9760%" y="527.50"></text></g><g><title>__clock_gettime_2 (2 samples, 0.05%)</title><rect x="14.7260%" y="501" width="0.0457%" height="15" fill="rgb(207,117,47)" fg:x="645" fg:w="2"/><text x="14.9760%" y="511.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="14.7260%" y="485" width="0.0457%" height="15" fill="rgb(249,43,39)" fg:x="645" fg:w="2"/><text x="14.9760%" y="495.50"></text></g><g><title>[[vdso]] (2 samples, 0.05%)</title><rect x="14.7260%" y="469" width="0.0457%" height="15" fill="rgb(209,38,44)" fg:x="645" fg:w="2"/><text x="14.9760%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="15.7078%" y="469" width="0.0228%" height="15" fill="rgb(236,212,23)" fg:x="688" fg:w="1"/><text x="15.9578%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="15.7078%" y="453" width="0.0228%" height="15" fill="rgb(242,79,21)" fg:x="688" fg:w="1"/><text x="15.9578%" y="463.50"></text></g><g><title>__realloc (1 samples, 0.02%)</title><rect x="15.7078%" y="437" width="0.0228%" height="15" fill="rgb(211,96,35)" fg:x="688" fg:w="1"/><text x="15.9578%" y="447.50"></text></g><g><title>__free (19 samples, 0.43%)</title><rect x="15.9132%" y="389" width="0.4338%" height="15" fill="rgb(253,215,40)" fg:x="697" fg:w="19"/><text x="16.1632%" y="399.50"></text></g><g><title>_int_free (15 samples, 0.34%)</title><rect x="16.0046%" y="373" width="0.3425%" height="15" fill="rgb(211,81,21)" fg:x="701" fg:w="15"/><text x="16.2546%" y="383.50"></text></g><g><title>malloc_consolidate (9 samples, 0.21%)</title><rect x="16.1416%" y="357" width="0.2055%" height="15" fill="rgb(208,190,38)" fg:x="707" fg:w="9"/><text x="16.3916%" y="367.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="16.3242%" y="341" width="0.0228%" height="15" fill="rgb(235,213,38)" fg:x="715" fg:w="1"/><text x="16.5742%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.62%)</title><rect x="15.7534%" y="405" width="0.6164%" height="15" fill="rgb(237,122,38)" fg:x="690" fg:w="27"/><text x="16.0034%" y="415.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="16.3470%" y="389" width="0.0228%" height="15" fill="rgb(244,218,35)" fg:x="716" fg:w="1"/><text x="16.5970%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="16.3470%" y="373" width="0.0228%" height="15" fill="rgb(240,68,47)" fg:x="716" fg:w="1"/><text x="16.5970%" y="383.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (49 samples, 1.12%)</title><rect x="15.7306%" y="469" width="1.1187%" height="15" fill="rgb(210,16,53)" fg:x="689" fg:w="49"/><text x="15.9806%" y="479.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::shutdown (49 samples, 1.12%)</title><rect x="15.7306%" y="453" width="1.1187%" height="15" fill="rgb(235,124,12)" fg:x="689" fg:w="49"/><text x="15.9806%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;core::future::from_generator::GenFuture&lt;fifa_sorter::main::{{closure}}::{{closure}}&gt;&gt;&gt; (49 samples, 1.12%)</title><rect x="15.7306%" y="437" width="1.1187%" height="15" fill="rgb(224,169,11)" fg:x="689" fg:w="49"/><text x="15.9806%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (49 samples, 1.12%)</title><rect x="15.7306%" y="421" width="1.1187%" height="15" fill="rgb(250,166,2)" fg:x="689" fg:w="49"/><text x="15.9806%" y="431.50"></text></g><g><title>__free (21 samples, 0.48%)</title><rect x="16.3699%" y="405" width="0.4795%" height="15" fill="rgb(242,216,29)" fg:x="717" fg:w="21"/><text x="16.6199%" y="415.50"></text></g><g><title>_int_free (19 samples, 0.43%)</title><rect x="16.4155%" y="389" width="0.4338%" height="15" fill="rgb(230,116,27)" fg:x="719" fg:w="19"/><text x="16.6655%" y="399.50"></text></g><g><title>unlink_chunk.constprop.0 (5 samples, 0.11%)</title><rect x="16.7352%" y="373" width="0.1142%" height="15" fill="rgb(228,99,48)" fg:x="733" fg:w="5"/><text x="16.9852%" y="383.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (5 samples, 0.11%)</title><rect x="16.8493%" y="469" width="0.1142%" height="15" fill="rgb(253,11,6)" fg:x="738" fg:w="5"/><text x="17.0993%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (12 samples, 0.27%)</title><rect x="16.9635%" y="469" width="0.2740%" height="15" fill="rgb(247,143,39)" fg:x="743" fg:w="12"/><text x="17.2135%" y="479.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (103 samples, 2.35%)</title><rect x="17.2374%" y="469" width="2.3516%" height="15" fill="rgb(236,97,10)" fg:x="755" fg:w="103"/><text x="17.4874%" y="479.50">t..</text></g><g><title>&lt;tokio::runtime::thread_pool::park::Parker as tokio::park::Park&gt;::park (98 samples, 2.24%)</title><rect x="17.3516%" y="453" width="2.2374%" height="15" fill="rgb(233,208,19)" fg:x="760" fg:w="98"/><text x="17.6016%" y="463.50">&lt;..</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (58 samples, 1.32%)</title><rect x="18.2648%" y="437" width="1.3242%" height="15" fill="rgb(216,164,2)" fg:x="800" fg:w="58"/><text x="18.5148%" y="447.50"></text></g><g><title>syscall (11 samples, 0.25%)</title><rect x="19.3379%" y="421" width="0.2511%" height="15" fill="rgb(220,129,5)" fg:x="847" fg:w="11"/><text x="19.5879%" y="431.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Unparker as tokio::park::Unpark&gt;::unpark (4 samples, 0.09%)</title><rect x="19.7032%" y="453" width="0.0913%" height="15" fill="rgb(242,17,10)" fg:x="863" fg:w="4"/><text x="19.9532%" y="463.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="19.8174%" y="437" width="0.0228%" height="15" fill="rgb(242,107,0)" fg:x="868" fg:w="1"/><text x="20.0674%" y="447.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.07%)</title><rect x="19.7945%" y="453" width="0.0685%" height="15" fill="rgb(251,28,31)" fg:x="867" fg:w="3"/><text x="20.0445%" y="463.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="19.8402%" y="437" width="0.0228%" height="15" fill="rgb(233,223,10)" fg:x="869" fg:w="1"/><text x="20.0902%" y="447.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (1 samples, 0.02%)</title><rect x="40.3196%" y="341" width="0.0228%" height="15" fill="rgb(215,21,27)" fg:x="1766" fg:w="1"/><text x="40.5696%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="40.3425%" y="341" width="0.0228%" height="15" fill="rgb(232,23,21)" fg:x="1767" fg:w="1"/><text x="40.5925%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect x="40.3425%" y="325" width="0.0228%" height="15" fill="rgb(244,5,23)" fg:x="1767" fg:w="1"/><text x="40.5925%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.41%)</title><rect x="40.2055%" y="357" width="0.4110%" height="15" fill="rgb(226,81,46)" fg:x="1761" fg:w="18"/><text x="40.4555%" y="367.50"></text></g><g><title>csv_core::reader::Reader::read_record (11 samples, 0.25%)</title><rect x="40.3653%" y="341" width="0.2511%" height="15" fill="rgb(247,70,30)" fg:x="1768" fg:w="11"/><text x="40.6153%" y="351.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.55%)</title><rect x="40.1142%" y="373" width="0.5479%" height="15" fill="rgb(212,68,19)" fg:x="1757" fg:w="24"/><text x="40.3642%" y="383.50"></text></g><g><title>csv_async::byte_record::ByteRecord::validate (2 samples, 0.05%)</title><rect x="40.6164%" y="357" width="0.0457%" height="15" fill="rgb(240,187,13)" fg:x="1779" fg:w="2"/><text x="40.8664%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.87%)</title><rect x="40.0228%" y="389" width="0.8676%" height="15" fill="rgb(223,113,26)" fg:x="1753" fg:w="38"/><text x="40.2728%" y="399.50"></text></g><g><title>csv_async::deserializer::deserialize_string_record (10 samples, 0.23%)</title><rect x="40.6621%" y="373" width="0.2283%" height="15" fill="rgb(206,192,2)" fg:x="1781" fg:w="10"/><text x="40.9121%" y="383.50"></text></g><g><title>&lt;&amp;mut csv_async::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (9 samples, 0.21%)</title><rect x="40.6849%" y="357" width="0.2055%" height="15" fill="rgb(241,108,4)" fg:x="1782" fg:w="9"/><text x="40.9349%" y="367.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect x="40.8447%" y="341" width="0.0457%" height="15" fill="rgb(247,173,49)" fg:x="1789" fg:w="2"/><text x="41.0947%" y="351.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (1 samples, 0.02%)</title><rect x="40.8676%" y="325" width="0.0228%" height="15" fill="rgb(224,114,35)" fg:x="1790" fg:w="1"/><text x="41.1176%" y="335.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.02%)</title><rect x="40.8676%" y="309" width="0.0228%" height="15" fill="rgb(245,159,27)" fg:x="1790" fg:w="1"/><text x="41.1176%" y="319.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="40.8904%" y="389" width="0.0228%" height="15" fill="rgb(245,172,44)" fg:x="1791" fg:w="1"/><text x="41.1404%" y="399.50"></text></g><g><title>__free (1 samples, 0.02%)</title><rect x="40.9132%" y="389" width="0.0228%" height="15" fill="rgb(236,23,11)" fg:x="1792" fg:w="1"/><text x="41.1632%" y="399.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="40.9132%" y="373" width="0.0228%" height="15" fill="rgb(205,117,38)" fg:x="1792" fg:w="1"/><text x="41.1632%" y="383.50"></text></g><g><title>&lt;&amp;mut S as futures_core::stream::Stream&gt;::poll_next (44 samples, 1.00%)</title><rect x="39.9543%" y="405" width="1.0046%" height="15" fill="rgb(237,72,25)" fg:x="1750" fg:w="44"/><text x="40.2043%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;csv_async::async_readers::deserialize_record_borrowed&lt;tokio::fs::file::File,fifa_sorter::reading::Tag&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="40.9361%" y="389" width="0.0228%" height="15" fill="rgb(244,70,9)" fg:x="1793" fg:w="1"/><text x="41.1861%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="40.9589%" y="293" width="0.0228%" height="15" fill="rgb(217,125,39)" fg:x="1794" fg:w="1"/><text x="41.2089%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.39%)</title><rect x="40.9589%" y="405" width="0.3881%" height="15" fill="rgb(235,36,10)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.39%)</title><rect x="40.9589%" y="389" width="0.3881%" height="15" fill="rgb(251,123,47)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.39%)</title><rect x="40.9589%" y="373" width="0.3881%" height="15" fill="rgb(221,13,13)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.39%)</title><rect x="40.9589%" y="357" width="0.3881%" height="15" fill="rgb(238,131,9)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.39%)</title><rect x="40.9589%" y="341" width="0.3881%" height="15" fill="rgb(211,50,8)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.39%)</title><rect x="40.9589%" y="325" width="0.3881%" height="15" fill="rgb(245,182,24)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.39%)</title><rect x="40.9589%" y="309" width="0.3881%" height="15" fill="rgb(242,14,37)" fg:x="1794" fg:w="17"/><text x="41.2089%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.37%)</title><rect x="40.9817%" y="293" width="0.3653%" height="15" fill="rgb(246,228,12)" fg:x="1795" fg:w="16"/><text x="41.2317%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.37%)</title><rect x="40.9817%" y="277" width="0.3653%" height="15" fill="rgb(213,55,15)" fg:x="1795" fg:w="16"/><text x="41.2317%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.37%)</title><rect x="40.9817%" y="261" width="0.3653%" height="15" fill="rgb(209,9,3)" fg:x="1795" fg:w="16"/><text x="41.2317%" y="271.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.37%)</title><rect x="40.9817%" y="245" width="0.3653%" height="15" fill="rgb(230,59,30)" fg:x="1795" fg:w="16"/><text x="41.2317%" y="255.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.37%)</title><rect x="40.9817%" y="229" width="0.3653%" height="15" fill="rgb(209,121,21)" fg:x="1795" fg:w="16"/><text x="41.2317%" y="239.50"></text></g><g><title>_int_malloc (9 samples, 0.21%)</title><rect x="41.1416%" y="213" width="0.2055%" height="15" fill="rgb(220,109,13)" fg:x="1802" fg:w="9"/><text x="41.3916%" y="223.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.07%)</title><rect x="41.2785%" y="197" width="0.0685%" height="15" fill="rgb(232,18,1)" fg:x="1808" fg:w="3"/><text x="41.5285%" y="207.50"></text></g><g><title>&lt;alloc::string::String as fifa_sorter::hash_table::Hashable&gt;::hash (1 samples, 0.02%)</title><rect x="41.3470%" y="405" width="0.0228%" height="15" fill="rgb(215,41,42)" fg:x="1811" fg:w="1"/><text x="41.5970%" y="415.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.09%)</title><rect x="55.6849%" y="293" width="0.0913%" height="15" fill="rgb(224,123,36)" fg:x="2439" fg:w="4"/><text x="55.9349%" y="303.50"></text></g><g><title>tokio::runtime::task::raw::try_read_output (2 samples, 0.05%)</title><rect x="55.7306%" y="277" width="0.0457%" height="15" fill="rgb(240,125,3)" fg:x="2441" fg:w="2"/><text x="55.9806%" y="287.50"></text></g><g><title>tokio::runtime::task::harness::can_read_output (1 samples, 0.02%)</title><rect x="55.7534%" y="261" width="0.0228%" height="15" fill="rgb(205,98,50)" fg:x="2442" fg:w="1"/><text x="56.0034%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.02%)</title><rect x="55.7534%" y="245" width="0.0228%" height="15" fill="rgb(205,185,37)" fg:x="2442" fg:w="1"/><text x="56.0034%" y="255.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (1 samples, 0.02%)</title><rect x="55.7534%" y="229" width="0.0228%" height="15" fill="rgb(238,207,15)" fg:x="2442" fg:w="1"/><text x="56.0034%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (30 samples, 0.68%)</title><rect x="55.7763%" y="293" width="0.6849%" height="15" fill="rgb(213,199,42)" fg:x="2443" fg:w="30"/><text x="56.0263%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.05%)</title><rect x="56.5297%" y="261" width="0.0457%" height="15" fill="rgb(235,201,11)" fg:x="2476" fg:w="2"/><text x="56.7797%" y="271.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (2 samples, 0.05%)</title><rect x="56.5297%" y="245" width="0.0457%" height="15" fill="rgb(207,46,11)" fg:x="2476" fg:w="2"/><text x="56.7797%" y="255.50"></text></g><g><title>&lt;tokio::io::util::buf_reader::BufReader&lt;R&gt; as tokio::io::async_buf_read::AsyncBufRead&gt;::poll_fill_buf (53 samples, 1.21%)</title><rect x="55.3881%" y="325" width="1.2100%" height="15" fill="rgb(241,35,35)" fg:x="2426" fg:w="53"/><text x="55.6381%" y="335.50"></text></g><g><title>&lt;tokio::fs::file::File as tokio::io::async_read::AsyncRead&gt;::poll_read (40 samples, 0.91%)</title><rect x="55.6849%" y="309" width="0.9132%" height="15" fill="rgb(243,32,47)" fg:x="2439" fg:w="40"/><text x="55.9349%" y="319.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 0.14%)</title><rect x="56.4612%" y="293" width="0.1370%" height="15" fill="rgb(247,202,23)" fg:x="2473" fg:w="6"/><text x="56.7112%" y="303.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn (4 samples, 0.09%)</title><rect x="56.5068%" y="277" width="0.0913%" height="15" fill="rgb(219,102,11)" fg:x="2475" fg:w="4"/><text x="56.7568%" y="287.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (1 samples, 0.02%)</title><rect x="56.5753%" y="261" width="0.0228%" height="15" fill="rgb(243,110,44)" fg:x="2478" fg:w="1"/><text x="56.8253%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (521 samples, 11.89%)</title><rect x="52.4886%" y="341" width="11.8950%" height="15" fill="rgb(222,74,54)" fg:x="2299" fg:w="521"/><text x="52.7386%" y="351.50">&lt;core::future::fro..</text></g><g><title>csv_core::reader::Reader::read_record (341 samples, 7.79%)</title><rect x="56.5982%" y="325" width="7.7854%" height="15" fill="rgb(216,99,12)" fg:x="2479" fg:w="341"/><text x="56.8482%" y="335.50">csv_core::r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (671 samples, 15.32%)</title><rect x="49.4064%" y="357" width="15.3196%" height="15" fill="rgb(226,22,26)" fg:x="2164" fg:w="671"/><text x="49.6564%" y="367.50">&lt;core::future::from_gen..</text></g><g><title>csv_async::byte_record::ByteRecord::validate (15 samples, 0.34%)</title><rect x="64.3836%" y="341" width="0.3425%" height="15" fill="rgb(217,163,10)" fg:x="2820" fg:w="15"/><text x="64.6336%" y="351.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (4 samples, 0.09%)</title><rect x="73.8584%" y="293" width="0.0913%" height="15" fill="rgb(213,25,53)" fg:x="3235" fg:w="4"/><text x="74.1084%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 1.37%)</title><rect x="74.5205%" y="277" width="1.3699%" height="15" fill="rgb(252,105,26)" fg:x="3264" fg:w="60"/><text x="74.7705%" y="287.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (148 samples, 3.38%)</title><rect x="73.8584%" y="309" width="3.3790%" height="15" fill="rgb(220,39,43)" fg:x="3235" fg:w="148"/><text x="74.1084%" y="319.50">cor..</text></g><g><title>core::num::from_str_radix (144 samples, 3.29%)</title><rect x="73.9498%" y="293" width="3.2877%" height="15" fill="rgb(229,68,48)" fg:x="3239" fg:w="144"/><text x="74.1998%" y="303.50">cor..</text></g><g><title>&lt;u32 as core::ops::arith::Mul&gt;::mul (59 samples, 1.35%)</title><rect x="75.8904%" y="277" width="1.3470%" height="15" fill="rgb(252,8,32)" fg:x="3324" fg:w="59"/><text x="76.1404%" y="287.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (61 samples, 1.39%)</title><rect x="77.2374%" y="309" width="1.3927%" height="15" fill="rgb(223,20,43)" fg:x="3383" fg:w="61"/><text x="77.4874%" y="319.50"></text></g><g><title>&lt;f32 as core::num::dec2flt::float::RawFloat&gt;::from_u64 (4 samples, 0.09%)</title><rect x="78.5388%" y="293" width="0.0913%" height="15" fill="rgb(229,81,49)" fg:x="3440" fg:w="4"/><text x="78.7888%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (2 samples, 0.05%)</title><rect x="78.8584%" y="293" width="0.0457%" height="15" fill="rgb(236,28,36)" fg:x="3454" fg:w="2"/><text x="79.1084%" y="303.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::step (2 samples, 0.05%)</title><rect x="79.2009%" y="277" width="0.0457%" height="15" fill="rgb(249,185,26)" fg:x="3469" fg:w="2"/><text x="79.4509%" y="287.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::step_by (2 samples, 0.05%)</title><rect x="79.2009%" y="261" width="0.0457%" height="15" fill="rgb(249,174,33)" fg:x="3469" fg:w="2"/><text x="79.4509%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.05%)</title><rect x="79.2009%" y="245" width="0.0457%" height="15" fill="rgb(233,201,37)" fg:x="3469" fg:w="2"/><text x="79.4509%" y="255.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.05%)</title><rect x="79.2009%" y="229" width="0.0457%" height="15" fill="rgb(221,78,26)" fg:x="3469" fg:w="2"/><text x="79.4509%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.05%)</title><rect x="79.2009%" y="213" width="0.0457%" height="15" fill="rgb(250,127,30)" fg:x="3469" fg:w="2"/><text x="79.4509%" y="223.50"></text></g><g><title>core::num::dec2flt::common::ByteSlice::first_is2 (1 samples, 0.02%)</title><rect x="79.2466%" y="277" width="0.0228%" height="15" fill="rgb(230,49,44)" fg:x="3471" fg:w="1"/><text x="79.4966%" y="287.50"></text></g><g><title>core::num::dec2flt::common::ByteSlice::offset_from (2 samples, 0.05%)</title><rect x="79.2694%" y="277" width="0.0457%" height="15" fill="rgb(229,67,23)" fg:x="3472" fg:w="2"/><text x="79.5194%" y="287.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_8digits (2 samples, 0.05%)</title><rect x="79.3151%" y="277" width="0.0457%" height="15" fill="rgb(249,83,47)" fg:x="3474" fg:w="2"/><text x="79.5651%" y="287.50"></text></g><g><title>core::num::dec2flt::common::ByteSlice::read_u64 (2 samples, 0.05%)</title><rect x="79.3151%" y="261" width="0.0457%" height="15" fill="rgb(215,43,3)" fg:x="3474" fg:w="2"/><text x="79.5651%" y="271.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::step (1 samples, 0.02%)</title><rect x="79.6347%" y="245" width="0.0228%" height="15" fill="rgb(238,154,13)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="255.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::step_by (1 samples, 0.02%)</title><rect x="79.6347%" y="229" width="0.0228%" height="15" fill="rgb(219,56,2)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="79.6347%" y="213" width="0.0228%" height="15" fill="rgb(233,0,4)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="223.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="79.6347%" y="197" width="0.0228%" height="15" fill="rgb(235,30,7)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="79.6347%" y="181" width="0.0228%" height="15" fill="rgb(250,79,13)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="79.6347%" y="165" width="0.0228%" height="15" fill="rgb(211,146,34)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.02%)</title><rect x="79.6347%" y="149" width="0.0228%" height="15" fill="rgb(228,22,38)" fg:x="3488" fg:w="1"/><text x="79.8847%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.02%)</title><rect x="79.6575%" y="229" width="0.0228%" height="15" fill="rgb(235,168,5)" fg:x="3489" fg:w="1"/><text x="79.9075%" y="239.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits::{{closure}} (4 samples, 0.09%)</title><rect x="79.6575%" y="245" width="0.0913%" height="15" fill="rgb(221,155,16)" fg:x="3489" fg:w="4"/><text x="79.9075%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.07%)</title><rect x="79.6804%" y="229" width="0.0685%" height="15" fill="rgb(215,215,53)" fg:x="3490" fg:w="3"/><text x="79.9304%" y="239.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (432 samples, 9.86%)</title><rect x="69.9543%" y="325" width="9.8630%" height="15" fill="rgb(223,4,10)" fg:x="3064" fg:w="432"/><text x="70.2043%" y="335.50">&lt;core::marker:..</text></g><g><title>core::num::dec2flt::parse::parse_number (52 samples, 1.19%)</title><rect x="78.6301%" y="309" width="1.1872%" height="15" fill="rgb(234,103,6)" fg:x="3444" fg:w="52"/><text x="78.8801%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (40 samples, 0.91%)</title><rect x="78.9041%" y="293" width="0.9132%" height="15" fill="rgb(227,97,0)" fg:x="3456" fg:w="40"/><text x="79.1541%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::try_parse_digits (20 samples, 0.46%)</title><rect x="79.3607%" y="277" width="0.4566%" height="15" fill="rgb(234,150,53)" fg:x="3476" fg:w="20"/><text x="79.6107%" y="287.50"></text></g><g><title>core::num::dec2flt::common::AsciiStr::parse_digits (20 samples, 0.46%)</title><rect x="79.3607%" y="261" width="0.4566%" height="15" fill="rgb(228,201,54)" fg:x="3476" fg:w="20"/><text x="79.6107%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (3 samples, 0.07%)</title><rect x="79.7489%" y="245" width="0.0685%" height="15" fill="rgb(222,22,37)" fg:x="3493" fg:w="3"/><text x="79.9989%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,533 samples, 35.00%)</title><rect x="46.2557%" y="373" width="35.0000%" height="15" fill="rgb(237,53,32)" fg:x="2026" fg:w="1533"/><text x="46.5057%" y="383.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::futu..</text></g><g><title>csv_async::deserializer::deserialize_string_record (724 samples, 16.53%)</title><rect x="64.7260%" y="357" width="16.5297%" height="15" fill="rgb(233,25,53)" fg:x="2835" fg:w="724"/><text x="64.9760%" y="367.50">csv_async::deserializer::d..</text></g><g><title>&lt;&amp;mut csv_async::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_struct (653 samples, 14.91%)</title><rect x="66.3470%" y="341" width="14.9087%" height="15" fill="rgb(210,40,34)" fg:x="2906" fg:w="653"/><text x="66.5970%" y="351.50">&lt;&amp;mut csv_async::deseri..</text></g><g><title>&lt;fifa_sorter::reading::_::&lt;impl serde::de::Deserialize for fifa_sorter::reading::Rating&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_bytes (63 samples, 1.44%)</title><rect x="79.8174%" y="325" width="1.4384%" height="15" fill="rgb(241,220,44)" fg:x="3496" fg:w="63"/><text x="80.0674%" y="335.50"></text></g><g><title>__GI___libc_malloc (50 samples, 1.14%)</title><rect x="81.2557%" y="373" width="1.1416%" height="15" fill="rgb(235,28,35)" fg:x="3559" fg:w="50"/><text x="81.5057%" y="383.50"></text></g><g><title>__free (94 samples, 2.15%)</title><rect x="82.3973%" y="373" width="2.1461%" height="15" fill="rgb(210,56,17)" fg:x="3609" fg:w="94"/><text x="82.6473%" y="383.50">_..</text></g><g><title>_int_free (66 samples, 1.51%)</title><rect x="83.0365%" y="357" width="1.5068%" height="15" fill="rgb(224,130,29)" fg:x="3637" fg:w="66"/><text x="83.2865%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (43 samples, 0.98%)</title><rect x="84.5434%" y="373" width="0.9817%" height="15" fill="rgb(235,212,8)" fg:x="3703" fg:w="43"/><text x="84.7934%" y="383.50"></text></g><g><title>__rdl_alloc (7 samples, 0.16%)</title><rect x="85.5251%" y="373" width="0.1598%" height="15" fill="rgb(223,33,50)" fg:x="3746" fg:w="7"/><text x="85.7751%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.16%)</title><rect x="85.5251%" y="357" width="0.1598%" height="15" fill="rgb(219,149,13)" fg:x="3746" fg:w="7"/><text x="85.7751%" y="367.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.18%)</title><rect x="85.6849%" y="373" width="0.1826%" height="15" fill="rgb(250,156,29)" fg:x="3753" fg:w="8"/><text x="85.9349%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.18%)</title><rect x="85.6849%" y="357" width="0.1826%" height="15" fill="rgb(216,193,19)" fg:x="3753" fg:w="8"/><text x="85.9349%" y="367.50"></text></g><g><title>__rust_alloc (7 samples, 0.16%)</title><rect x="85.8676%" y="373" width="0.1598%" height="15" fill="rgb(216,135,14)" fg:x="3761" fg:w="7"/><text x="86.1176%" y="383.50"></text></g><g><title>__rust_dealloc (5 samples, 0.11%)</title><rect x="86.0274%" y="373" width="0.1142%" height="15" fill="rgb(241,47,5)" fg:x="3768" fg:w="5"/><text x="86.2774%" y="383.50"></text></g><g><title>&lt;csv_async::async_readers::DeserializeRecordsStream&lt;R,D&gt; as futures_core::stream::Stream&gt;::poll_next (1,853 samples, 42.31%)</title><rect x="44.1096%" y="389" width="42.3059%" height="15" fill="rgb(233,42,35)" fg:x="1932" fg:w="1853"/><text x="44.3596%" y="399.50">&lt;csv_async::async_readers::DeserializeRecordsStream&lt;R,D&gt; as futures_c..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;csv_async::async_readers::deserialize_record_borrowed&lt;tokio::fs::file::File,fifa_sorter::reading::Tag&gt;::{{closure}}&gt;&gt; (12 samples, 0.27%)</title><rect x="86.1416%" y="373" width="0.2740%" height="15" fill="rgb(231,13,6)" fg:x="3773" fg:w="12"/><text x="86.3916%" y="383.50"></text></g><g><title>&lt;tokio_stream::stream_ext::collect::Collect&lt;T,U&gt; as core::future::future::Future&gt;::poll (2,025 samples, 46.23%)</title><rect x="41.3699%" y="405" width="46.2329%" height="15" fill="rgb(207,181,40)" fg:x="1812" fg:w="2025"/><text x="41.6199%" y="415.50">&lt;tokio_stream::stream_ext::collect::Collect&lt;T,U&gt; as core::future::future::Fu..</text></g><g><title>tokio_stream::stream_ext::collect::&lt;impl tokio_stream::stream_ext::collect::sealed::FromStreamPriv&lt;core::result::Result&lt;T,E&gt;&gt; for core::result::Result&lt;U,E&gt;&gt;::extend (52 samples, 1.19%)</title><rect x="86.4155%" y="389" width="1.1872%" height="15" fill="rgb(254,173,49)" fg:x="3785" fg:w="52"/><text x="86.6655%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="87.6027%" y="405" width="0.0228%" height="15" fill="rgb(221,1,38)" fg:x="3837" fg:w="1"/><text x="87.8527%" y="415.50"></text></g><g><title>__free (2 samples, 0.05%)</title><rect x="87.6256%" y="405" width="0.0457%" height="15" fill="rgb(206,124,46)" fg:x="3838" fg:w="2"/><text x="87.8756%" y="415.50"></text></g><g><title>_int_free (1 samples, 0.02%)</title><rect x="87.6484%" y="389" width="0.0228%" height="15" fill="rgb(249,21,11)" fg:x="3839" fg:w="1"/><text x="87.8984%" y="399.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.05%)</title><rect x="87.6712%" y="405" width="0.0457%" height="15" fill="rgb(222,201,40)" fg:x="3840" fg:w="2"/><text x="87.9212%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.46%)</title><rect x="91.6895%" y="341" width="0.4566%" height="15" fill="rgb(235,61,29)" fg:x="4016" fg:w="20"/><text x="91.9395%" y="351.50"></text></g><g><title>_int_free (26 samples, 0.59%)</title><rect x="92.1461%" y="341" width="0.5936%" height="15" fill="rgb(219,207,3)" fg:x="4036" fg:w="26"/><text x="92.3961%" y="351.50"></text></g><g><title>unlink_chunk.constprop.0 (19 samples, 0.43%)</title><rect x="92.3059%" y="325" width="0.4338%" height="15" fill="rgb(222,56,46)" fg:x="4043" fg:w="19"/><text x="92.5559%" y="335.50"></text></g><g><title>malloc_consolidate (10 samples, 0.23%)</title><rect x="93.0365%" y="325" width="0.2283%" height="15" fill="rgb(239,76,54)" fg:x="4075" fg:w="10"/><text x="93.2865%" y="335.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.02%)</title><rect x="93.2420%" y="309" width="0.0228%" height="15" fill="rgb(231,124,27)" fg:x="4084" fg:w="1"/><text x="93.4920%" y="319.50"></text></g><g><title>sysmalloc (5 samples, 0.11%)</title><rect x="93.2648%" y="325" width="0.1142%" height="15" fill="rgb(249,195,6)" fg:x="4085" fg:w="5"/><text x="93.5148%" y="335.50"></text></g><g><title>__GI___mprotect (4 samples, 0.09%)</title><rect x="93.2877%" y="309" width="0.0913%" height="15" fill="rgb(237,174,47)" fg:x="4086" fg:w="4"/><text x="93.5377%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="93.3333%" y="293" width="0.0457%" height="15" fill="rgb(206,201,31)" fg:x="4088" fg:w="2"/><text x="93.5833%" y="303.50"></text></g><g><title>_int_malloc (31 samples, 0.71%)</title><rect x="92.7397%" y="341" width="0.7078%" height="15" fill="rgb(231,57,52)" fg:x="4062" fg:w="31"/><text x="92.9897%" y="351.50"></text></g><g><title>unlink_chunk.constprop.0 (3 samples, 0.07%)</title><rect x="93.3790%" y="325" width="0.0685%" height="15" fill="rgb(248,177,22)" fg:x="4090" fg:w="3"/><text x="93.6290%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (270 samples, 6.16%)</title><rect x="87.7169%" y="405" width="6.1644%" height="15" fill="rgb(215,211,37)" fg:x="3842" fg:w="270"/><text x="87.9669%" y="415.50">alloc::r..</text></g><g><title>alloc::raw_vec::finish_grow (267 samples, 6.10%)</title><rect x="87.7854%" y="389" width="6.0959%" height="15" fill="rgb(241,128,51)" fg:x="3845" fg:w="267"/><text x="88.0354%" y="399.50">alloc::r..</text></g><g><title>__realloc (265 samples, 6.05%)</title><rect x="87.8311%" y="373" width="6.0502%" height="15" fill="rgb(227,165,31)" fg:x="3847" fg:w="265"/><text x="88.0811%" y="383.50">__realloc</text></g><g><title>_int_realloc (179 samples, 4.09%)</title><rect x="89.7945%" y="357" width="4.0868%" height="15" fill="rgb(228,167,24)" fg:x="3933" fg:w="179"/><text x="90.0445%" y="367.50">_int..</text></g><g><title>unlink_chunk.constprop.0 (19 samples, 0.43%)</title><rect x="93.4475%" y="341" width="0.4338%" height="15" fill="rgb(228,143,12)" fg:x="4093" fg:w="19"/><text x="93.6975%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 0.32%)</title><rect x="93.8813%" y="405" width="0.3196%" height="15" fill="rgb(249,149,8)" fg:x="4112" fg:w="14"/><text x="94.1313%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="94.3151%" y="325" width="0.0228%" height="15" fill="rgb(243,35,44)" fg:x="4131" fg:w="1"/><text x="94.5651%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (5 samples, 0.11%)</title><rect x="94.2466%" y="357" width="0.1142%" height="15" fill="rgb(246,89,9)" fg:x="4128" fg:w="5"/><text x="94.4966%" y="367.50"></text></g><g><title>epoll_wait (5 samples, 0.11%)</title><rect x="94.2466%" y="341" width="0.1142%" height="15" fill="rgb(233,213,13)" fg:x="4128" fg:w="5"/><text x="94.4966%" y="351.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="94.3379%" y="325" width="0.0228%" height="15" fill="rgb(233,141,41)" fg:x="4132" fg:w="1"/><text x="94.5879%" y="335.50"></text></g><g><title>std::time::Instant::elapsed (2 samples, 0.05%)</title><rect x="94.3607%" y="357" width="0.0457%" height="15" fill="rgb(239,167,4)" fg:x="4133" fg:w="2"/><text x="94.6107%" y="367.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.05%)</title><rect x="94.3607%" y="341" width="0.0457%" height="15" fill="rgb(209,217,16)" fg:x="4133" fg:w="2"/><text x="94.6107%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.05%)</title><rect x="94.3607%" y="325" width="0.0457%" height="15" fill="rgb(219,88,35)" fg:x="4133" fg:w="2"/><text x="94.6107%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.05%)</title><rect x="94.3607%" y="309" width="0.0457%" height="15" fill="rgb(220,193,23)" fg:x="4133" fg:w="2"/><text x="94.6107%" y="319.50"></text></g><g><title>__clock_gettime_2 (1 samples, 0.02%)</title><rect x="94.3836%" y="293" width="0.0228%" height="15" fill="rgb(230,90,52)" fg:x="4134" fg:w="1"/><text x="94.6336%" y="303.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="94.3836%" y="277" width="0.0228%" height="15" fill="rgb(252,106,19)" fg:x="4134" fg:w="1"/><text x="94.6336%" y="287.50"></text></g><g><title>[[vdso]] (1 samples, 0.02%)</title><rect x="94.3836%" y="261" width="0.0228%" height="15" fill="rgb(206,74,20)" fg:x="4134" fg:w="1"/><text x="94.6336%" y="271.50"></text></g><g><title>&lt;crossterm::event::source::unix::UnixInternalEventSource as crossterm::event::source::EventSource&gt;::try_read (10 samples, 0.23%)</title><rect x="94.2237%" y="373" width="0.2283%" height="15" fill="rgb(230,138,44)" fg:x="4127" fg:w="10"/><text x="94.4737%" y="383.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.05%)</title><rect x="94.4064%" y="357" width="0.0457%" height="15" fill="rgb(235,182,43)" fg:x="4135" fg:w="2"/><text x="94.6564%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.05%)</title><rect x="94.4064%" y="341" width="0.0457%" height="15" fill="rgb(242,16,51)" fg:x="4135" fg:w="2"/><text x="94.6564%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.05%)</title><rect x="94.4064%" y="325" width="0.0457%" height="15" fill="rgb(248,9,4)" fg:x="4135" fg:w="2"/><text x="94.6564%" y="335.50"></text></g><g><title>__clock_gettime_2 (2 samples, 0.05%)</title><rect x="94.4064%" y="309" width="0.0457%" height="15" fill="rgb(210,31,22)" fg:x="4135" fg:w="2"/><text x="94.6564%" y="319.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.05%)</title><rect x="94.4064%" y="293" width="0.0457%" height="15" fill="rgb(239,54,39)" fg:x="4135" fg:w="2"/><text x="94.6564%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.02%)</title><rect x="94.4749%" y="277" width="0.0228%" height="15" fill="rgb(230,99,41)" fg:x="4138" fg:w="1"/><text x="94.7249%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.02%)</title><rect x="94.4749%" y="261" width="0.0228%" height="15" fill="rgb(253,106,12)" fg:x="4138" fg:w="1"/><text x="94.7249%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.02%)</title><rect x="94.4749%" y="245" width="0.0228%" height="15" fill="rgb(213,46,41)" fg:x="4138" fg:w="1"/><text x="94.7249%" y="255.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3 samples, 0.07%)</title><rect x="94.4521%" y="357" width="0.0685%" height="15" fill="rgb(215,133,35)" fg:x="4137" fg:w="3"/><text x="94.7021%" y="367.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.07%)</title><rect x="94.4521%" y="341" width="0.0685%" height="15" fill="rgb(213,28,5)" fg:x="4137" fg:w="3"/><text x="94.7021%" y="351.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.07%)</title><rect x="94.4521%" y="325" width="0.0685%" height="15" fill="rgb(215,77,49)" fg:x="4137" fg:w="3"/><text x="94.7021%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (3 samples, 0.07%)</title><rect x="94.4521%" y="309" width="0.0685%" height="15" fill="rgb(248,100,22)" fg:x="4137" fg:w="3"/><text x="94.7021%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.07%)</title><rect x="94.4521%" y="293" width="0.0685%" height="15" fill="rgb(208,67,9)" fg:x="4137" fg:w="3"/><text x="94.7021%" y="303.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.02%)</title><rect x="94.4977%" y="277" width="0.0228%" height="15" fill="rgb(219,133,21)" fg:x="4139" fg:w="1"/><text x="94.7477%" y="287.50"></text></g><g><title>crossterm::event::poll (17 samples, 0.39%)</title><rect x="94.2009%" y="405" width="0.3881%" height="15" fill="rgb(246,46,29)" fg:x="4126" fg:w="17"/><text x="94.4509%" y="415.50"></text></g><g><title>crossterm::event::read::InternalEventReader::poll (17 samples, 0.39%)</title><rect x="94.2009%" y="389" width="0.3881%" height="15" fill="rgb(246,185,52)" fg:x="4126" fg:w="17"/><text x="94.4509%" y="399.50"></text></g><g><title>std::time::Instant::elapsed (6 samples, 0.14%)</title><rect x="94.4521%" y="373" width="0.1370%" height="15" fill="rgb(252,136,11)" fg:x="4137" fg:w="6"/><text x="94.7021%" y="383.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.07%)</title><rect x="94.5205%" y="357" width="0.0685%" height="15" fill="rgb(219,138,53)" fg:x="4140" fg:w="3"/><text x="94.7705%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (3 samples, 0.07%)</title><rect x="94.5205%" y="341" width="0.0685%" height="15" fill="rgb(211,51,23)" fg:x="4140" fg:w="3"/><text x="94.7705%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.07%)</title><rect x="94.5205%" y="325" width="0.0685%" height="15" fill="rgb(247,221,28)" fg:x="4140" fg:w="3"/><text x="94.7705%" y="335.50"></text></g><g><title>__clock_gettime_2 (3 samples, 0.07%)</title><rect x="94.5205%" y="309" width="0.0685%" height="15" fill="rgb(251,222,45)" fg:x="4140" fg:w="3"/><text x="94.7705%" y="319.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.07%)</title><rect x="94.5205%" y="293" width="0.0685%" height="15" fill="rgb(217,162,53)" fg:x="4140" fg:w="3"/><text x="94.7705%" y="303.50"></text></g><g><title>[[vdso]] (3 samples, 0.07%)</title><rect x="94.5205%" y="277" width="0.0685%" height="15" fill="rgb(229,93,14)" fg:x="4140" fg:w="3"/><text x="94.7705%" y="287.50"></text></g><g><title>fifa_sorter::hash_table::HashTable&lt;K,V&gt;::insert (5 samples, 0.11%)</title><rect x="94.5890%" y="405" width="0.1142%" height="15" fill="rgb(209,67,49)" fg:x="4143" fg:w="5"/><text x="94.8390%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.09%)</title><rect x="94.6119%" y="389" width="0.0913%" height="15" fill="rgb(213,87,29)" fg:x="4144" fg:w="4"/><text x="94.8619%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.09%)</title><rect x="94.6119%" y="373" width="0.0913%" height="15" fill="rgb(205,151,52)" fg:x="4144" fg:w="4"/><text x="94.8619%" y="383.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.09%)</title><rect x="94.6119%" y="357" width="0.0913%" height="15" fill="rgb(253,215,39)" fg:x="4144" fg:w="4"/><text x="94.8619%" y="367.50"></text></g><g><title>_int_malloc (3 samples, 0.07%)</title><rect x="94.6347%" y="341" width="0.0685%" height="15" fill="rgb(221,220,41)" fg:x="4145" fg:w="3"/><text x="94.8847%" y="351.50"></text></g><g><title>sysmalloc (1 samples, 0.02%)</title><rect x="94.6804%" y="325" width="0.0228%" height="15" fill="rgb(218,133,21)" fg:x="4147" fg:w="1"/><text x="94.9304%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,279 samples, 74.86%)</title><rect x="19.8630%" y="421" width="74.8630%" height="15" fill="rgb(221,193,43)" fg:x="870" fg:w="3279"/><text x="20.1130%" y="431.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (1 samples, 0.02%)</title><rect x="94.7032%" y="405" width="0.0228%" height="15" fill="rgb(240,128,52)" fg:x="4148" fg:w="1"/><text x="94.9532%" y="415.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3,501 samples, 79.93%)</title><rect x="14.8630%" y="533" width="79.9315%" height="15" fill="rgb(253,114,12)" fg:x="651" fg:w="3501"/><text x="15.1130%" y="543.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::thread_pool::worker::run (3,501 samples, 79.93%)</title><rect x="14.8630%" y="517" width="79.9315%" height="15" fill="rgb(215,223,47)" fg:x="651" fg:w="3501"/><text x="15.1130%" y="527.50">tokio::runtime::thread_pool::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3,500 samples, 79.91%)</title><rect x="14.8858%" y="501" width="79.9087%" height="15" fill="rgb(248,225,23)" fg:x="652" fg:w="3500"/><text x="15.1358%" y="511.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (3,498 samples, 79.86%)</title><rect x="14.9315%" y="485" width="79.8630%" height="15" fill="rgb(250,108,0)" fg:x="654" fg:w="3498"/><text x="15.1815%" y="495.50">tokio::runtime::thread_pool::worker::Context::run</text></g><g><title>tokio::runtime::thread_pool::worker::Context::run_task (3,294 samples, 75.21%)</title><rect x="19.5890%" y="469" width="75.2055%" height="15" fill="rgb(228,208,7)" fg:x="858" fg:w="3294"/><text x="19.8390%" y="479.50">tokio::runtime::thread_pool::worker::Context::run_task</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,282 samples, 74.93%)</title><rect x="19.8630%" y="453" width="74.9315%" height="15" fill="rgb(244,45,10)" fg:x="870" fg:w="3282"/><text x="20.1130%" y="463.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,282 samples, 74.93%)</title><rect x="19.8630%" y="437" width="74.9315%" height="15" fill="rgb(207,125,25)" fg:x="870" fg:w="3282"/><text x="20.1130%" y="447.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (3 samples, 0.07%)</title><rect x="94.7260%" y="421" width="0.0685%" height="15" fill="rgb(210,195,18)" fg:x="4149" fg:w="3"/><text x="94.9760%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;tokio::runtime::blocking::task::BlockingTask&lt;tokio::runtime::thread_pool::worker::Launch::launch::{{closure}}&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="94.7945%" y="533" width="0.0228%" height="15" fill="rgb(249,80,12)" fg:x="4152" fg:w="1"/><text x="95.0445%" y="543.50"></text></g><g><title>std::panicking::try (1 samples, 0.02%)</title><rect x="94.8174%" y="533" width="0.0228%" height="15" fill="rgb(221,65,9)" fg:x="4153" fg:w="1"/><text x="95.0674%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="95.2283%" y="421" width="0.0457%" height="15" fill="rgb(235,49,36)" fg:x="4171" fg:w="2"/><text x="95.4783%" y="431.50"></text></g><g><title>__GI___pthread_disable_asynccancel (1 samples, 0.02%)</title><rect x="95.2740%" y="421" width="0.0228%" height="15" fill="rgb(225,32,20)" fg:x="4173" fg:w="1"/><text x="95.5240%" y="431.50"></text></g><g><title>__libc_read (8 samples, 0.18%)</title><rect x="95.1370%" y="437" width="0.1826%" height="15" fill="rgb(215,141,46)" fg:x="4167" fg:w="8"/><text x="95.3870%" y="447.50"></text></g><g><title>__GI___pthread_enable_asynccancel (1 samples, 0.02%)</title><rect x="95.2968%" y="421" width="0.0228%" height="15" fill="rgb(250,160,47)" fg:x="4174" fg:w="1"/><text x="95.5468%" y="431.50"></text></g><g><title>tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (22 samples, 0.50%)</title><rect x="94.8402%" y="533" width="0.5023%" height="15" fill="rgb(216,222,40)" fg:x="4154" fg:w="22"/><text x="95.0902%" y="543.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.50%)</title><rect x="94.8402%" y="517" width="0.5023%" height="15" fill="rgb(234,217,39)" fg:x="4154" fg:w="22"/><text x="95.0902%" y="527.50"></text></g><g><title>tokio::io::blocking::Buf::read_from (20 samples, 0.46%)</title><rect x="94.8858%" y="501" width="0.4566%" height="15" fill="rgb(207,178,40)" fg:x="4156" fg:w="20"/><text x="95.1358%" y="511.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read (16 samples, 0.37%)</title><rect x="94.9772%" y="485" width="0.3653%" height="15" fill="rgb(221,136,13)" fg:x="4160" fg:w="16"/><text x="95.2272%" y="495.50"></text></g><g><title>std::sys::unix::fs::File::read (10 samples, 0.23%)</title><rect x="95.1142%" y="469" width="0.2283%" height="15" fill="rgb(249,199,10)" fg:x="4166" fg:w="10"/><text x="95.3642%" y="479.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (10 samples, 0.23%)</title><rect x="95.1142%" y="453" width="0.2283%" height="15" fill="rgb(249,222,13)" fg:x="4166" fg:w="10"/><text x="95.3642%" y="463.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.02%)</title><rect x="95.3196%" y="437" width="0.0228%" height="15" fill="rgb(244,185,38)" fg:x="4175" fg:w="1"/><text x="95.5696%" y="447.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.02%)</title><rect x="95.3196%" y="421" width="0.0228%" height="15" fill="rgb(236,202,9)" fg:x="4175" fg:w="1"/><text x="95.5696%" y="431.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (6 samples, 0.14%)</title><rect x="95.3881%" y="517" width="0.1370%" height="15" fill="rgb(250,229,37)" fg:x="4178" fg:w="6"/><text x="95.6381%" y="527.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_ref (6 samples, 0.14%)</title><rect x="95.3881%" y="501" width="0.1370%" height="15" fill="rgb(206,174,23)" fg:x="4178" fg:w="6"/><text x="95.6381%" y="511.50"></text></g><g><title>&lt;tokio::runtime::thread_pool::park::Unparker as tokio::park::Unpark&gt;::unpark (9 samples, 0.21%)</title><rect x="95.5251%" y="501" width="0.2055%" height="15" fill="rgb(211,33,43)" fg:x="4184" fg:w="9"/><text x="95.7751%" y="511.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="95.8676%" y="485" width="0.0228%" height="15" fill="rgb(245,58,50)" fg:x="4199" fg:w="1"/><text x="96.1176%" y="495.50"></text></g><g><title>std::time::Instant::now (3 samples, 0.07%)</title><rect x="95.8904%" y="485" width="0.0685%" height="15" fill="rgb(244,68,36)" fg:x="4200" fg:w="3"/><text x="96.1404%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (3 samples, 0.07%)</title><rect x="95.8904%" y="469" width="0.0685%" height="15" fill="rgb(232,229,15)" fg:x="4200" fg:w="3"/><text x="96.1404%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3 samples, 0.07%)</title><rect x="95.8904%" y="453" width="0.0685%" height="15" fill="rgb(254,30,23)" fg:x="4200" fg:w="3"/><text x="96.1404%" y="463.50"></text></g><g><title>__clock_gettime_2 (3 samples, 0.07%)</title><rect x="95.8904%" y="437" width="0.0685%" height="15" fill="rgb(235,160,14)" fg:x="4200" fg:w="3"/><text x="96.1404%" y="447.50"></text></g><g><title>__vdso_clock_gettime (3 samples, 0.07%)</title><rect x="95.8904%" y="421" width="0.0685%" height="15" fill="rgb(212,155,44)" fg:x="4200" fg:w="3"/><text x="96.1404%" y="431.50"></text></g><g><title>[[vdso]] (2 samples, 0.05%)</title><rect x="95.9132%" y="405" width="0.0457%" height="15" fill="rgb(226,2,50)" fg:x="4201" fg:w="2"/><text x="96.1632%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (12 samples, 0.27%)</title><rect x="95.7306%" y="501" width="0.2740%" height="15" fill="rgb(234,177,6)" fg:x="4193" fg:w="12"/><text x="95.9806%" y="511.50"></text></g><g><title>syscall (2 samples, 0.05%)</title><rect x="95.9589%" y="485" width="0.0457%" height="15" fill="rgb(217,24,9)" fg:x="4203" fg:w="2"/><text x="96.2089%" y="495.50"></text></g><g><title>tokio::runtime::task::inject::Inject&lt;T&gt;::push (11 samples, 0.25%)</title><rect x="96.0274%" y="485" width="0.2511%" height="15" fill="rgb(220,13,46)" fg:x="4206" fg:w="11"/><text x="96.2774%" y="495.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,712 samples, 84.75%)</title><rect x="11.8493%" y="565" width="84.7489%" height="15" fill="rgb(239,221,27)" fg:x="519" fg:w="3712"/><text x="12.0993%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3,584 samples, 81.83%)</title><rect x="14.7717%" y="549" width="81.8265%" height="15" fill="rgb(222,198,25)" fg:x="647" fg:w="3584"/><text x="15.0217%" y="559.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (55 samples, 1.26%)</title><rect x="95.3425%" y="533" width="1.2557%" height="15" fill="rgb(211,99,13)" fg:x="4176" fg:w="55"/><text x="95.5925%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::thread_pool::worker::Shared&gt;&gt;::schedule (47 samples, 1.07%)</title><rect x="95.5251%" y="517" width="1.0731%" height="15" fill="rgb(232,111,31)" fg:x="4184" fg:w="47"/><text x="95.7751%" y="527.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (26 samples, 0.59%)</title><rect x="96.0046%" y="501" width="0.5936%" height="15" fill="rgb(245,82,37)" fg:x="4205" fg:w="26"/><text x="96.2546%" y="511.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::worker_to_notify (14 samples, 0.32%)</title><rect x="96.2785%" y="485" width="0.3196%" height="15" fill="rgb(227,149,46)" fg:x="4217" fg:w="14"/><text x="96.5285%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,717 samples, 84.86%)</title><rect x="11.7808%" y="613" width="84.8630%" height="15" fill="rgb(218,36,50)" fg:x="516" fg:w="3717"/><text x="12.0308%" y="623.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (3,717 samples, 84.86%)</title><rect x="11.7808%" y="597" width="84.8630%" height="15" fill="rgb(226,80,48)" fg:x="516" fg:w="3717"/><text x="12.0308%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3,717 samples, 84.86%)</title><rect x="11.7808%" y="581" width="84.8630%" height="15" fill="rgb(238,224,15)" fg:x="516" fg:w="3717"/><text x="12.0308%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Thread::cname (2 samples, 0.05%)</title><rect x="96.5982%" y="565" width="0.0457%" height="15" fill="rgb(241,136,10)" fg:x="4231" fg:w="2"/><text x="96.8482%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_deref (2 samples, 0.05%)</title><rect x="96.5982%" y="549" width="0.0457%" height="15" fill="rgb(208,32,45)" fg:x="4231" fg:w="2"/><text x="96.8482%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="96.5982%" y="533" width="0.0457%" height="15" fill="rgb(207,135,9)" fg:x="4231" fg:w="2"/><text x="96.8482%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.02%)</title><rect x="96.6438%" y="613" width="0.0228%" height="15" fill="rgb(206,86,44)" fg:x="4233" fg:w="1"/><text x="96.8938%" y="623.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="96.6438%" y="597" width="0.0228%" height="15" fill="rgb(245,177,15)" fg:x="4233" fg:w="1"/><text x="96.8938%" y="607.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.02%)</title><rect x="96.6438%" y="581" width="0.0228%" height="15" fill="rgb(206,64,50)" fg:x="4233" fg:w="1"/><text x="96.8938%" y="591.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.02%)</title><rect x="96.6438%" y="565" width="0.0228%" height="15" fill="rgb(234,36,40)" fg:x="4233" fg:w="1"/><text x="96.8938%" y="575.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.02%)</title><rect x="96.6667%" y="581" width="0.0228%" height="15" fill="rgb(213,64,8)" fg:x="4234" fg:w="1"/><text x="96.9167%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="96.6667%" y="565" width="0.0228%" height="15" fill="rgb(210,75,36)" fg:x="4234" fg:w="1"/><text x="96.9167%" y="575.50"></text></g><g><title>__clone3 (3,781 samples, 86.32%)</title><rect x="10.3881%" y="661" width="86.3242%" height="15" fill="rgb(229,88,21)" fg:x="455" fg:w="3781"/><text x="10.6381%" y="671.50">__clone3</text></g><g><title>start_thread (3,781 samples, 86.32%)</title><rect x="10.3881%" y="645" width="86.3242%" height="15" fill="rgb(252,204,47)" fg:x="455" fg:w="3781"/><text x="10.6381%" y="655.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,720 samples, 84.93%)</title><rect x="11.7808%" y="629" width="84.9315%" height="15" fill="rgb(208,77,27)" fg:x="516" fg:w="3720"/><text x="12.0308%" y="639.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 0.05%)</title><rect x="96.6667%" y="613" width="0.0457%" height="15" fill="rgb(221,76,26)" fg:x="4234" fg:w="2"/><text x="96.9167%" y="623.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.05%)</title><rect x="96.6667%" y="597" width="0.0457%" height="15" fill="rgb(225,139,18)" fg:x="4234" fg:w="2"/><text x="96.9167%" y="607.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.02%)</title><rect x="96.6895%" y="581" width="0.0228%" height="15" fill="rgb(230,137,11)" fg:x="4235" fg:w="1"/><text x="96.9395%" y="591.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.02%)</title><rect x="96.6895%" y="565" width="0.0228%" height="15" fill="rgb(212,28,1)" fg:x="4235" fg:w="1"/><text x="96.9395%" y="575.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.02%)</title><rect x="96.6895%" y="549" width="0.0228%" height="15" fill="rgb(248,164,17)" fg:x="4235" fg:w="1"/><text x="96.9395%" y="559.50"></text></g><g><title>__GI___sysconf (1 samples, 0.02%)</title><rect x="96.6895%" y="533" width="0.0228%" height="15" fill="rgb(222,171,42)" fg:x="4235" fg:w="1"/><text x="96.9395%" y="543.50"></text></g><g><title>__free (6 samples, 0.14%)</title><rect x="96.7123%" y="661" width="0.1370%" height="15" fill="rgb(243,84,45)" fg:x="4236" fg:w="6"/><text x="96.9623%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.07%)</title><rect x="96.8493%" y="661" width="0.0685%" height="15" fill="rgb(252,49,23)" fg:x="4242" fg:w="3"/><text x="97.0993%" y="671.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="96.9178%" y="661" width="0.0228%" height="15" fill="rgb(215,19,7)" fg:x="4245" fg:w="1"/><text x="97.1678%" y="671.50"></text></g><g><title>_int_free (12 samples, 0.27%)</title><rect x="96.9406%" y="661" width="0.2740%" height="15" fill="rgb(238,81,41)" fg:x="4246" fg:w="12"/><text x="97.1906%" y="671.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="97.2146%" y="661" width="0.0228%" height="15" fill="rgb(210,199,37)" fg:x="4258" fg:w="1"/><text x="97.4646%" y="671.50"></text></g><g><title>_int_realloc (4 samples, 0.09%)</title><rect x="97.2374%" y="661" width="0.0913%" height="15" fill="rgb(244,192,49)" fg:x="4259" fg:w="4"/><text x="97.4874%" y="671.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (4 samples, 0.09%)</title><rect x="97.3744%" y="357" width="0.0913%" height="15" fill="rgb(226,211,11)" fg:x="4265" fg:w="4"/><text x="97.6244%" y="367.50"></text></g><g><title>tokio::park::thread::Inner::park (4 samples, 0.09%)</title><rect x="97.3744%" y="341" width="0.0913%" height="15" fill="rgb(236,162,54)" fg:x="4265" fg:w="4"/><text x="97.6244%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.07%)</title><rect x="97.3973%" y="325" width="0.0685%" height="15" fill="rgb(220,229,9)" fg:x="4266" fg:w="3"/><text x="97.6473%" y="335.50"></text></g><g><title>syscall (1 samples, 0.02%)</title><rect x="97.4429%" y="309" width="0.0228%" height="15" fill="rgb(250,87,22)" fg:x="4268" fg:w="1"/><text x="97.6929%" y="319.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="97.4658%" y="325" width="0.0228%" height="15" fill="rgb(239,43,17)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="335.50"></text></g><g><title>log::__private_api_log (1 samples, 0.02%)</title><rect x="97.4658%" y="309" width="0.0228%" height="15" fill="rgb(231,177,25)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="319.50"></text></g><g><title>&lt;tui_logger::TuiLogger as log::Log&gt;::log (1 samples, 0.02%)</title><rect x="97.4658%" y="293" width="0.0228%" height="15" fill="rgb(219,179,1)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="303.50"></text></g><g><title>chrono::offset::local::Local::now (1 samples, 0.02%)</title><rect x="97.4658%" y="277" width="0.0228%" height="15" fill="rgb(238,219,53)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="287.50"></text></g><g><title>chrono::offset::local::inner::now (1 samples, 0.02%)</title><rect x="97.4658%" y="261" width="0.0228%" height="15" fill="rgb(232,167,36)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="97.4658%" y="245" width="0.0228%" height="15" fill="rgb(244,19,51)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="255.50"></text></g><g><title>&lt;chrono::offset::local::inner::Cache as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="97.4658%" y="229" width="0.0228%" height="15" fill="rgb(224,6,22)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="239.50"></text></g><g><title>chrono::offset::local::tz_info::timezone::TimeZone::local (1 samples, 0.02%)</title><rect x="97.4658%" y="213" width="0.0228%" height="15" fill="rgb(224,145,5)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="223.50"></text></g><g><title>chrono::offset::local::tz_info::timezone::TimeZone::from_posix_tz (1 samples, 0.02%)</title><rect x="97.4658%" y="197" width="0.0228%" height="15" fill="rgb(234,130,49)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="207.50"></text></g><g><title>std::fs::read::inner (1 samples, 0.02%)</title><rect x="97.4658%" y="181" width="0.0228%" height="15" fill="rgb(254,6,2)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="191.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (1 samples, 0.02%)</title><rect x="97.4658%" y="165" width="0.0228%" height="15" fill="rgb(208,96,46)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="97.4658%" y="149" width="0.0228%" height="15" fill="rgb(239,3,39)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="97.4658%" y="133" width="0.0228%" height="15" fill="rgb(233,210,1)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="97.4658%" y="117" width="0.0228%" height="15" fill="rgb(244,137,37)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="97.4658%" y="101" width="0.0228%" height="15" fill="rgb(240,136,2)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="97.4658%" y="85" width="0.0228%" height="15" fill="rgb(239,18,37)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="95.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="97.4658%" y="69" width="0.0228%" height="15" fill="rgb(218,185,22)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="79.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="97.4658%" y="53" width="0.0228%" height="15" fill="rgb(225,218,4)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="63.50"></text></g><g><title>malloc_consolidate (1 samples, 0.02%)</title><rect x="97.4658%" y="37" width="0.0228%" height="15" fill="rgb(230,182,32)" fg:x="4269" fg:w="1"/><text x="97.7158%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.4886%" y="277" width="0.0228%" height="15" fill="rgb(242,56,43)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.4886%" y="261" width="0.0228%" height="15" fill="rgb(233,99,24)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="97.4886%" y="245" width="0.0228%" height="15" fill="rgb(234,209,42)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="97.4886%" y="229" width="0.0228%" height="15" fill="rgb(227,7,12)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="97.4886%" y="213" width="0.0228%" height="15" fill="rgb(245,203,43)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="97.4886%" y="197" width="0.0228%" height="15" fill="rgb(238,205,33)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="97.4886%" y="181" width="0.0228%" height="15" fill="rgb(231,56,7)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="97.4886%" y="165" width="0.0228%" height="15" fill="rgb(244,186,29)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="97.4886%" y="149" width="0.0228%" height="15" fill="rgb(234,111,31)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="97.4886%" y="133" width="0.0228%" height="15" fill="rgb(241,149,10)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="97.4886%" y="117" width="0.0228%" height="15" fill="rgb(249,206,44)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.02%)</title><rect x="97.4886%" y="101" width="0.0228%" height="15" fill="rgb(251,153,30)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="111.50"></text></g><g><title>_int_malloc (1 samples, 0.02%)</title><rect x="97.4886%" y="85" width="0.0228%" height="15" fill="rgb(239,152,38)" fg:x="4270" fg:w="1"/><text x="97.7386%" y="95.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="97.5114%" y="277" width="0.0228%" height="15" fill="rgb(249,139,47)" fg:x="4271" fg:w="1"/><text x="97.7614%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="97.5114%" y="261" width="0.0228%" height="15" fill="rgb(244,64,35)" fg:x="4271" fg:w="1"/><text x="97.7614%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="97.5799%" y="261" width="0.0457%" height="15" fill="rgb(216,46,15)" fg:x="4274" fg:w="2"/><text x="97.8299%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.6027%" y="245" width="0.0228%" height="15" fill="rgb(250,74,19)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="97.6027%" y="229" width="0.0228%" height="15" fill="rgb(249,42,33)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="97.6027%" y="213" width="0.0228%" height="15" fill="rgb(242,149,17)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="97.6027%" y="197" width="0.0228%" height="15" fill="rgb(244,29,21)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="97.6027%" y="181" width="0.0228%" height="15" fill="rgb(220,130,37)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="97.6027%" y="165" width="0.0228%" height="15" fill="rgb(211,67,2)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="97.6027%" y="149" width="0.0228%" height="15" fill="rgb(235,68,52)" fg:x="4275" fg:w="1"/><text x="97.8527%" y="159.50"></text></g><g><title>tui::terminal::Terminal&lt;B&gt;::draw (11 samples, 0.25%)</title><rect x="97.4886%" y="325" width="0.2511%" height="15" fill="rgb(246,142,3)" fg:x="4270" fg:w="11"/><text x="97.7386%" y="335.50"></text></g><g><title>fifa_sorter::app::ui::draw (11 samples, 0.25%)</title><rect x="97.4886%" y="309" width="0.2511%" height="15" fill="rgb(241,25,7)" fg:x="4270" fg:w="11"/><text x="97.7386%" y="319.50"></text></g><g><title>fifa_sorter::app::ui::draw_body (11 samples, 0.25%)</title><rect x="97.4886%" y="293" width="0.2511%" height="15" fill="rgb(242,119,39)" fg:x="4270" fg:w="11"/><text x="97.7386%" y="303.50"></text></g><g><title>fifa_sorter::hash_table::HashTable&lt;K,V&gt;::get (9 samples, 0.21%)</title><rect x="97.5342%" y="277" width="0.2055%" height="15" fill="rgb(241,98,45)" fg:x="4272" fg:w="9"/><text x="97.7842%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.11%)</title><rect x="97.6256%" y="261" width="0.1142%" height="15" fill="rgb(254,28,30)" fg:x="4276" fg:w="5"/><text x="97.8756%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="97.6941%" y="245" width="0.0457%" height="15" fill="rgb(241,142,54)" fg:x="4279" fg:w="2"/><text x="97.9441%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.7169%" y="229" width="0.0228%" height="15" fill="rgb(222,85,15)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.02%)</title><rect x="97.7169%" y="213" width="0.0228%" height="15" fill="rgb(210,85,47)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.02%)</title><rect x="97.7169%" y="197" width="0.0228%" height="15" fill="rgb(224,206,25)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.02%)</title><rect x="97.7169%" y="181" width="0.0228%" height="15" fill="rgb(243,201,19)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="97.7169%" y="165" width="0.0228%" height="15" fill="rgb(236,59,4)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="97.7169%" y="149" width="0.0228%" height="15" fill="rgb(254,179,45)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.02%)</title><rect x="97.7169%" y="133" width="0.0228%" height="15" fill="rgb(226,14,10)" fg:x="4280" fg:w="1"/><text x="97.9669%" y="143.50"></text></g><g><title>__libc_start_main_alias_2 (18 samples, 0.41%)</title><rect x="97.3516%" y="645" width="0.4110%" height="15" fill="rgb(244,27,41)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="655.50"></text></g><g><title>__libc_start_call_main (18 samples, 0.41%)</title><rect x="97.3516%" y="629" width="0.4110%" height="15" fill="rgb(235,35,32)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="639.50"></text></g><g><title>main (18 samples, 0.41%)</title><rect x="97.3516%" y="613" width="0.4110%" height="15" fill="rgb(218,68,31)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="623.50"></text></g><g><title>std::rt::lang_start_internal (18 samples, 0.41%)</title><rect x="97.3516%" y="597" width="0.4110%" height="15" fill="rgb(207,120,37)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="607.50"></text></g><g><title>std::panic::catch_unwind (18 samples, 0.41%)</title><rect x="97.3516%" y="581" width="0.4110%" height="15" fill="rgb(227,98,0)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="591.50"></text></g><g><title>std::panicking::try (18 samples, 0.41%)</title><rect x="97.3516%" y="565" width="0.4110%" height="15" fill="rgb(207,7,3)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="575.50"></text></g><g><title>std::panicking::try::do_call (18 samples, 0.41%)</title><rect x="97.3516%" y="549" width="0.4110%" height="15" fill="rgb(206,98,19)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="559.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (18 samples, 0.41%)</title><rect x="97.3516%" y="533" width="0.4110%" height="15" fill="rgb(217,5,26)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="543.50"></text></g><g><title>std::panic::catch_unwind (18 samples, 0.41%)</title><rect x="97.3516%" y="517" width="0.4110%" height="15" fill="rgb(235,190,38)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="527.50"></text></g><g><title>std::panicking::try (18 samples, 0.41%)</title><rect x="97.3516%" y="501" width="0.4110%" height="15" fill="rgb(247,86,24)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="511.50"></text></g><g><title>std::panicking::try::do_call (18 samples, 0.41%)</title><rect x="97.3516%" y="485" width="0.4110%" height="15" fill="rgb(205,101,16)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (18 samples, 0.41%)</title><rect x="97.3516%" y="469" width="0.4110%" height="15" fill="rgb(246,168,33)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="479.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (18 samples, 0.41%)</title><rect x="97.3516%" y="453" width="0.4110%" height="15" fill="rgb(231,114,1)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="463.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (18 samples, 0.41%)</title><rect x="97.3516%" y="437" width="0.4110%" height="15" fill="rgb(207,184,53)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="447.50"></text></g><g><title>fifa_sorter::main (18 samples, 0.41%)</title><rect x="97.3516%" y="421" width="0.4110%" height="15" fill="rgb(224,95,51)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="431.50"></text></g><g><title>tokio::runtime::Runtime::block_on (18 samples, 0.41%)</title><rect x="97.3516%" y="405" width="0.4110%" height="15" fill="rgb(212,188,45)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="415.50"></text></g><g><title>tokio::runtime::thread_pool::ThreadPool::block_on (18 samples, 0.41%)</title><rect x="97.3516%" y="389" width="0.4110%" height="15" fill="rgb(223,154,38)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="399.50"></text></g><g><title>tokio::park::thread::CachedParkThread::block_on (18 samples, 0.41%)</title><rect x="97.3516%" y="373" width="0.4110%" height="15" fill="rgb(251,22,52)" fg:x="4264" fg:w="18"/><text x="97.6016%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13 samples, 0.30%)</title><rect x="97.4658%" y="357" width="0.2968%" height="15" fill="rgb(229,209,22)" fg:x="4269" fg:w="13"/><text x="97.7158%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.30%)</title><rect x="97.4658%" y="341" width="0.2968%" height="15" fill="rgb(234,138,34)" fg:x="4269" fg:w="13"/><text x="97.7158%" y="351.50"></text></g><g><title>tui::terminal::Terminal&lt;B&gt;::new (1 samples, 0.02%)</title><rect x="97.7397%" y="325" width="0.0228%" height="15" fill="rgb(212,95,11)" fg:x="4281" fg:w="1"/><text x="97.9897%" y="335.50"></text></g><g><title>tui::buffer::Buffer::empty (1 samples, 0.02%)</title><rect x="97.7397%" y="309" width="0.0228%" height="15" fill="rgb(240,179,47)" fg:x="4281" fg:w="1"/><text x="97.9897%" y="319.50"></text></g><g><title>tui::buffer::Buffer::filled (1 samples, 0.02%)</title><rect x="97.7397%" y="293" width="0.0228%" height="15" fill="rgb(240,163,11)" fg:x="4281" fg:w="1"/><text x="97.9897%" y="303.50"></text></g><g><title>_start (20 samples, 0.46%)</title><rect x="97.3288%" y="661" width="0.4566%" height="15" fill="rgb(236,37,12)" fg:x="4263" fg:w="20"/><text x="97.5788%" y="671.50"></text></g><g><title>_dl_start (1 samples, 0.02%)</title><rect x="97.7626%" y="645" width="0.0228%" height="15" fill="rgb(232,164,16)" fg:x="4282" fg:w="1"/><text x="98.0126%" y="655.50"></text></g><g><title>_dl_start_final (1 samples, 0.02%)</title><rect x="97.7626%" y="629" width="0.0228%" height="15" fill="rgb(244,205,15)" fg:x="4282" fg:w="1"/><text x="98.0126%" y="639.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.02%)</title><rect x="97.7626%" y="613" width="0.0228%" height="15" fill="rgb(223,117,47)" fg:x="4282" fg:w="1"/><text x="98.0126%" y="623.50"></text></g><g><title>dl_platform_init (1 samples, 0.02%)</title><rect x="97.7626%" y="597" width="0.0228%" height="15" fill="rgb(244,107,35)" fg:x="4282" fg:w="1"/><text x="98.0126%" y="607.50"></text></g><g><title>init_cpu_features (1 samples, 0.02%)</title><rect x="97.7626%" y="581" width="0.0228%" height="15" fill="rgb(205,140,8)" fg:x="4282" fg:w="1"/><text x="98.0126%" y="591.50"></text></g><g><title>get_common_indices (1 samples, 0.02%)</title><rect x="97.7626%" y="565" width="0.0228%" height="15" fill="rgb(228,84,46)" fg:x="4282" fg:w="1"/><text x="98.0126%" y="575.50"></text></g><g><title>anon.e12bdda73a787075b70c208f6e42bbee.8.llvm.10574319595725700612 (1 samples, 0.02%)</title><rect x="97.7854%" y="661" width="0.0228%" height="15" fill="rgb(254,188,9)" fg:x="4283" fg:w="1"/><text x="98.0354%" y="671.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_ref (1 samples, 0.02%)</title><rect x="97.7854%" y="645" width="0.0228%" height="15" fill="rgb(206,112,54)" fg:x="4283" fg:w="1"/><text x="98.0354%" y="655.50"></text></g><g><title>bstr::ascii::first_non_ascii_byte (1 samples, 0.02%)</title><rect x="97.8082%" y="661" width="0.0228%" height="15" fill="rgb(216,84,49)" fg:x="4284" fg:w="1"/><text x="98.0582%" y="671.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u32&gt;::from_str (1 samples, 0.02%)</title><rect x="97.8311%" y="661" width="0.0228%" height="15" fill="rgb(214,194,35)" fg:x="4285" fg:w="1"/><text x="98.0811%" y="671.50"></text></g><g><title>core::num::dec2flt::number::Number::try_fast_path (10 samples, 0.23%)</title><rect x="97.8539%" y="661" width="0.2283%" height="15" fill="rgb(249,28,3)" fg:x="4286" fg:w="10"/><text x="98.1039%" y="671.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (6 samples, 0.14%)</title><rect x="98.0822%" y="661" width="0.1370%" height="15" fill="rgb(222,56,52)" fg:x="4296" fg:w="6"/><text x="98.3322%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;csv_async::async_readers::deserialize_record_borrowed&lt;tokio::fs::file::File,fifa_sorter::reading::Tag&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="98.2192%" y="661" width="0.0228%" height="15" fill="rgb(245,217,50)" fg:x="4302" fg:w="1"/><text x="98.4692%" y="671.50"></text></g><g><title>csv_async::Trim::should_trim_fields (10 samples, 0.23%)</title><rect x="98.2420%" y="661" width="0.2283%" height="15" fill="rgb(213,201,24)" fg:x="4303" fg:w="10"/><text x="98.4920%" y="671.50"></text></g><g><title>csv_async::byte_record::ByteRecord::validate (15 samples, 0.34%)</title><rect x="98.4703%" y="661" width="0.3425%" height="15" fill="rgb(248,116,28)" fg:x="4313" fg:w="15"/><text x="98.7203%" y="671.50"></text></g><g><title>csv_async::deserializer::deserialize_string_record (9 samples, 0.21%)</title><rect x="98.8128%" y="661" width="0.2055%" height="15" fill="rgb(219,72,43)" fg:x="4328" fg:w="9"/><text x="99.0628%" y="671.50"></text></g><g><title>csv_core::reader::Reader::read_record (13 samples, 0.30%)</title><rect x="99.0183%" y="661" width="0.2968%" height="15" fill="rgb(209,138,14)" fg:x="4337" fg:w="13"/><text x="99.2683%" y="671.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.07%)</title><rect x="99.3151%" y="661" width="0.0685%" height="15" fill="rgb(222,18,33)" fg:x="4350" fg:w="3"/><text x="99.5651%" y="671.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.02%)</title><rect x="99.3836%" y="661" width="0.0228%" height="15" fill="rgb(213,199,7)" fg:x="4353" fg:w="1"/><text x="99.6336%" y="671.50"></text></g><g><title>start_thread (1 samples, 0.02%)</title><rect x="99.4064%" y="661" width="0.0228%" height="15" fill="rgb(250,110,10)" fg:x="4354" fg:w="1"/><text x="99.6564%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 0.05%)</title><rect x="99.4292%" y="661" width="0.0457%" height="15" fill="rgb(248,123,6)" fg:x="4355" fg:w="2"/><text x="99.6792%" y="671.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.02%)</title><rect x="99.4749%" y="661" width="0.0228%" height="15" fill="rgb(206,91,31)" fg:x="4357" fg:w="1"/><text x="99.7249%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.02%)</title><rect x="99.4749%" y="645" width="0.0228%" height="15" fill="rgb(211,154,13)" fg:x="4357" fg:w="1"/><text x="99.7249%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.02%)</title><rect x="99.4749%" y="629" width="0.0228%" height="15" fill="rgb(225,148,7)" fg:x="4357" fg:w="1"/><text x="99.7249%" y="639.50"></text></g><g><title>syscall (14 samples, 0.32%)</title><rect x="99.4977%" y="661" width="0.3196%" height="15" fill="rgb(220,160,43)" fg:x="4358" fg:w="14"/><text x="99.7477%" y="671.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.07%)</title><rect x="99.8174%" y="661" width="0.0685%" height="15" fill="rgb(213,52,39)" fg:x="4372" fg:w="3"/><text x="100.0674%" y="671.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.02%)</title><rect x="99.8858%" y="661" width="0.0228%" height="15" fill="rgb(243,137,7)" fg:x="4375" fg:w="1"/><text x="100.1358%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::idle::Idle::transition_worker_to_parked (1 samples, 0.02%)</title><rect x="99.9087%" y="661" width="0.0228%" height="15" fill="rgb(230,79,13)" fg:x="4376" fg:w="1"/><text x="100.1587%" y="671.50"></text></g><g><title>tokio::runtime::thread_pool::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.05%)</title><rect x="99.9315%" y="661" width="0.0457%" height="15" fill="rgb(247,105,23)" fg:x="4377" fg:w="2"/><text x="100.1815%" y="671.50"></text></g><g><title>all (4,380 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(223,179,41)" fg:x="0" fg:w="4380"/><text x="0.2500%" y="703.50"></text></g><g><title>fifa_sorter (4,380 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(218,9,34)" fg:x="0" fg:w="4380"/><text x="0.2500%" y="687.50">fifa_sorter</text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="99.9772%" y="661" width="0.0228%" height="15" fill="rgb(222,106,8)" fg:x="4379" fg:w="1"/><text x="100.2272%" y="671.50"></text></g></svg></svg>